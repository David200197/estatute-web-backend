import {
  Body,
  Controller,
  Delete,
  Get,
  HttpException,
  Param,
  Patch,
  Post,
  Query,
} from '@nestjs/common';
import { FindAllDto } from '@src/common/dto/find-all.dto';
import { Create<%= name.pascalCase %>Dto } from './dto/create-<%= name.kebabCase %>.dto';
import { Update<%= name.pascalCase %>Dto } from './dto/update-<%= name.kebabCase %>.dto';
import { SerializerResponse } from '@src/common/lib/response.lib';
import { CommandBus, QueryBus } from '@nestjs/cqrs';
import { Either } from '@src/common/lib/either.lib';
import { ResponseWithPaginate } from '@src/common/interfaces/response-with-paginate';
import { <%= name.pascalCase %>sModel } from './models/<%= name.kebabCase %>s.model';
import { <%= name.pascalCase %>Model } from './models/<%= name.kebabCase %>.model';
import { FindAll<%= name.pascalCase %>Query } from './handlers/find-all/find-all-<%= name.kebabCase %>.query';
import { FindOne<%= name.pascalCase %>Query } from './handlers/find-one/find-one-<%= name.kebabCase %>.query';
import { Create<%= name.pascalCase %>Command } from './handlers/create/create-<%= name.kebabCase %>.command';
import { Update<%= name.pascalCase %>Command } from './handlers/update/update-<%= name.kebabCase %>.command';
import { Remove<%= name.pascalCase %>Command } from './handlers/remove/remove-<%= name.kebabCase %>.command';

@Controller('<%= name.kebabCase %>')
export class <%= name.pascalCase %>Controller {
  constructor(
    private readonly commandBus: CommandBus,
    private readonly queryBus: QueryBus,
  ) {}

  @Get()
  async findAll(@Query() findAllDto: FindAllDto) {
    const {
      entities: <%= name.camelCase %>s,
      totalElement,
      totalPage,
    }: ResponseWithPaginate<<%= name.pascalCase %>sModel> = await this.queryBus.execute(
      new FindAll<%= name.pascalCase %>Query({}, findAllDto),
    );
    return new SerializerResponse('<%= name.camelCase %>s was founded', {
      <%= name.camelCase %>s,
      totalElement,
      totalPage,
    });
  }

  @Get('uuid')
  async findOneByUuid(@Param('uuid') uuid: string) {
    const eitherResponse: Either<HttpException, <%= name.pascalCase %>Model> = await this.queryBus.execute(
      new FindOne<%= name.pascalCase %>Query({ uuid }),
    );
    const <%= name.camelCase %> = eitherResponse.fold(
      (error) => {
        throw error;
      },
      (data) => data,
    );
    return new SerializerResponse('<%= name.camelCase %> was founded', {
      <%= name.camelCase %>,
    });
  }

  @Post()
  async create(@Body() create<%= name.pascalCase %>Dto: Create<%= name.pascalCase %>Dto) {
    const <%= name.camelCase %>: <%= name.pascalCase %>Model = await this.commandBus.execute(
      new Create<%= name.pascalCase %>Command(create<%= name.pascalCase %>Dto),
    );
    return new SerializerResponse('<%= name.camelCase %> was created', {
      <%= name.camelCase %>,
    });
  }

  @Patch('uuid')
  async update(
    @Param('uuid') uuid: string,
    @Body() update<%= name.pascalCase %>Dto: Update<%= name.pascalCase %>Dto,
  ) {
    const eitherResponse: Either<HttpException, <%= name.pascalCase %>Model> = await this.commandBus.execute(
      new Update<%= name.pascalCase %>Command({ uuid }, update<%= name.pascalCase %>Dto),
    );
    const <%= name.camelCase %> = eitherResponse.fold(
      (error) => {
        throw error;
      },
      (data) => data,
    );
    return new SerializerResponse('<%= name.camelCase %> was updated', {
      <%= name.camelCase %>,
    });
  }

  @Delete('uuid')
  async remove(@Param('uuid') uuid: string) {
    const eitherResponse: Either<HttpException, <%= name.pascalCase %>Model> = await this.commandBus.execute(
      new Remove<%= name.pascalCase %>Command({ uuid }),
    );
    const <%= name.camelCase %> = eitherResponse.fold(
      (error) => {
        throw error;
      },
      (data) => data,
    );
    return new SerializerResponse('<%= name.camelCase %> was removed', {
      <%= name.camelCase %>,
    });
  }
}
