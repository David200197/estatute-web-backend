import { Injectable } from '@nestjs/common';
import { <%= name.pascalCase %>RepositoryModel } from '../models/<%= name.kebabCase %>-repository.model';
import { <%= name.pascalCase %>sModel } from '../models/<%= name.kebabCase %>s.model';
import { <%= name.pascalCase %>Model, <%= name.pascalCase %>Props } from '../models/<%= name.kebabCase %>.model';
import { FindAllDto } from '@src/common/dto/find-all.dto';
import { Create<%= name.pascalCase %>Dto } from '../dto/create-<%= name.kebabCase %>.dto';
import { CrudMockMethods } from '@src/common/mocks/crud-mock.methods';
import { <%= name.pascalCase %>s } from '../entities/<%= name.kebabCase %>s';
import { Update<%= name.pascalCase %>Dto } from '../dto/update-<%= name.kebabCase %>.dto';
import { DeepPartial } from '@src/common/interfaces/deep-partial';
import { ResponseWithPaginate } from '@src/common/interfaces/response-with-paginate';
import { HelperMockMethods } from '@src/common/interfaces/helper-mock.methods';
import { <%= name.pascalCase %> } from '../entities/<%= name.kebabCase %>';

@Injectable()
export class <%= name.pascalCase %>LocalRepository implements <%= name.pascalCase %>RepositoryModel, HelperMockMethods<<%= name.pascalCase %>Model> {
  private <%= name.camelCase %>Crud: CrudMockMethods<<%= name.pascalCase %>Props>;

  constructor() {
    this.<%= name.camelCase %>Crud = new CrudMockMethods();
  }
  
  __changeStore(store: <%= name.pascalCase %>Model[]): void {
    this.<%= name.camelCase %>Crud.__changeStore(store.map((data) => data.toObject()));
  }

  __reset(): void {
    this.<%= name.camelCase %>Crud.__reset();
  }

  __setIsError(value: boolean): void {
    this.<%= name.camelCase %>Crud.__setIsError(value);
  }

  __getStore(): <%= name.pascalCase %>Model[] {
    return this.<%= name.camelCase %>Crud.__getStore().map((data) => <%= name.pascalCase %>.create(data));
  }

  __isError(): boolean {
    return this.<%= name.camelCase %>Crud.__isError();
  }

  __setFindAllRes(value: any) {
    this.<%= name.camelCase %>Crud.__setFindAllRes(value);
  }

  __setFindOneRes(value: any) {
    this.<%= name.camelCase %>Crud.__setFindOneRes(value);
  }

  __setCreateRes(value: any) {
    this.<%= name.camelCase %>Crud.__setCreateRes(value);
  }

  __setUpdateRes(value: any) {
    this.<%= name.camelCase %>Crud.__setUpdateRes(value);
  }

  __setUpdateManyRes(value: any) {
    this.<%= name.camelCase %>Crud.__setUpdateManyRes(value);
  }

  __setDeleteManyRes(value: any) {
    this.<%= name.camelCase %>Crud.__setDeleteManyRes(value);
  }

  __setDeleteRes(value: any) {
    this.<%= name.camelCase %>Crud.__setDeleteRes(value);
  }

  async findOne(filter: DeepPartial<<%= name.pascalCase %>Props>): Promise<<%= name.pascalCase %>Model | null> {
    const <%= name.camelCase %> = this.<%= name.camelCase %>Crud.findOne(filter);
    if(!<%= name.camelCase %>) return null;
    return Promise.resolve(<%= name.pascalCase %>.create(<%= name.camelCase %>));
  }

  async findAll(
    filter: DeepPartial<<%= name.pascalCase %>Props>,
    options: FindAllDto,
  ): Promise<ResponseWithPaginate<<%= name.pascalCase %>sModel>> {
    //using options
    options;
    //code
    const <%= name.camelCase %>s = this.<%= name.camelCase %>Crud.findAll(filter);
    return Promise.resolve({
      entities: <%= name.pascalCase %>s.create(<%= name.camelCase %>s),
      totalElement: 1,
      totalPage: 1,
    });
  }

  async create(options: Create<%= name.pascalCase %>Dto): Promise<<%= name.pascalCase %>Model> {
    const <%= name.camelCase %> = <%= name.pascalCase %>.create(options);
    this.<%= name.camelCase %>Crud.create(<%= name.camelCase %>.toObject());
    return <%= name.camelCase %>
  }

  async updateOne(
    filter: DeepPartial<<%= name.pascalCase %>Props>,
    options: Update<%= name.pascalCase %>Dto,
  ): Promise<<%= name.pascalCase %>Model> {
    const <%= name.camelCase %> = this.<%= name.camelCase %>Crud.update(filter, options);
    if(!<%= name.camelCase %>) return null;
    return <%= name.pascalCase %>.create(<%= name.camelCase %>) 
  }

  async removeOne(filter: DeepPartial<<%= name.pascalCase %>Props>): Promise<<%= name.pascalCase %>Model> {
    const <%= name.camelCase %> = this.<%= name.camelCase %>Crud.delete(filter);
    if(!<%= name.camelCase %>) return null;
    return <%= name.pascalCase %>.create(<%= name.camelCase %>) 
  }

  async updateMany(
    filter: DeepPartial<<%= name.pascalCase %>Props>,
    options: Update<%= name.pascalCase %>Dto,
  ): Promise<boolean> {
    return this.<%= name.camelCase %>Crud.updateMany(filter, options);
  }

  async removeMany(filter: DeepPartial<<%= name.pascalCase %>Props>): Promise<boolean> {
    return this.<%= name.camelCase %>Crud.deleteMany(filter);
  }
}
